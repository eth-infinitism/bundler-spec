{"version":3,"sources":["webpack:///./node_modules/@etclabscore/react-monaco-editor/node_modules/monaco-editor/esm/vs/basic-languages/dart/dart.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","end","language","defaultToken","tokenPostfix","keywords","typeKeywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","regexpctl","regexpesc","tokenizer","root","include","common","cases","token","bracket","next","whitespace","comment","jsdoc","regexp","regexrange","string_double","string_single"],"mappings":"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","file":"34-50c47e7005e4fadc4c60.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: ['string', 'comment']\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }, {\n    open: '`',\n    close: '`',\n    notIn: ['string', 'comment']\n  }, {\n    open: '/**',\n    close: ' */',\n    notIn: ['string']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '`',\n    close: '`'\n  }],\n  folding: {\n    markers: {\n      start: /^\\s*\\s*#?region\\b/,\n      end: /^\\s*\\s*#?endregion\\b/\n    }\n  }\n};\nexport var language = {\n  defaultToken: 'invalid',\n  tokenPostfix: '.dart',\n  keywords: ['abstract', 'dynamic', 'implements', 'show', 'as', 'else', 'import', 'static', 'assert', 'enum', 'in', 'super', 'async', 'export', 'interface', 'switch', 'await', 'extends', 'is', 'sync', 'break', 'external', 'library', 'this', 'case', 'factory', 'mixin', 'throw', 'catch', 'false', 'new', 'true', 'class', 'final', 'null', 'try', 'const', 'finally', 'on', 'typedef', 'continue', 'for', 'operator', 'var', 'covariant', 'Function', 'part', 'void', 'default', 'get', 'rethrow', 'while', 'deferred', 'hide', 'return', 'with', 'do', 'if', 'set', 'yield'],\n  typeKeywords: ['int', 'double', 'String', 'bool'],\n  operators: ['+', '-', '*', '/', '~/', '%', '++', '--', '==', '!=', '>', '<', '>=', '<=', '=', '-=', '/=', '%=', '>>=', '^=', '+=', '*=', '~/=', '<<=', '&=', '!=', '||', '&&', '&', '|', '^', '~', '<<', '>>', '!', '>>>', '??', '?', ':', '|='],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/[{}]/, 'delimiter.bracket'], {\n      include: 'common'\n    }],\n    common: [\n    // identifiers and keywords\n    [/[a-z_$][\\w$]*/, {\n      cases: {\n        '@typeKeywords': 'type.identifier',\n        '@keywords': 'keyword',\n        '@default': 'identifier'\n      }\n    }], [/(?<![a-zA-Z0-9_$])([_$]*[A-Z][a-zA-Z0-9_$]*)/, 'type.identifier'],\n    // [/[A-Z][\\w\\$]*/, 'identifier'],\n    // whitespace\n    {\n      include: '@whitespace'\n    },\n    // regular expression: ensure it is terminated before beginning (otherwise it is an opeator)\n    [/\\/(?=([^\\\\\\/]|\\\\.)+\\/([gimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/, {\n      token: 'regexp',\n      bracket: '@open',\n      next: '@regexp'\n    }],\n    // @ annotations.\n    [/@[a-zA-Z]+/, 'annotation'],\n    // variable\n    // delimiters and operators\n    [/[()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/!(?=([^=]|$))/, 'delimiter'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }],\n    // numbers\n    [/(@digits)[eE]([\\-+]?(@digits))?/, 'number.float'], [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, 'number.float'], [/0[xX](@hexdigits)n?/, 'number.hex'], [/0[oO]?(@octaldigits)n?/, 'number.octal'], [/0[bB](@binarydigits)n?/, 'number.binary'], [/(@digits)n?/, 'number'],\n    // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'],\n    // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string_double'], [/'/, 'string', '@string_single']\n    //   [/[a-zA-Z]+/, \"variable\"]\n    ],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@jsdoc'], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/\\/.*$/, 'comment.doc'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    jsdoc: [[/[^\\/*]+/, 'comment.doc'], [/\\*\\//, 'comment.doc', '@pop'], [/[\\/*]/, 'comment.doc']],\n    // We match regular expression quite precisely\n    regexp: [[/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['regexp.escape.control', 'regexp.escape.control', 'regexp.escape.control']], [/(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/, ['regexp.escape.control', {\n      token: 'regexp.escape.control',\n      next: '@regexrange'\n    }]], [/(\\()(\\?:|\\?=|\\?!)/, ['regexp.escape.control', 'regexp.escape.control']], [/[()]/, 'regexp.escape.control'], [/@regexpctl/, 'regexp.escape.control'], [/[^\\\\\\/]/, 'regexp'], [/@regexpesc/, 'regexp.escape'], [/\\\\\\./, 'regexp.invalid'], [/(\\/)([gimsuy]*)/, [{\n      token: 'regexp',\n      bracket: '@close',\n      next: '@pop'\n    }, 'keyword.other']]],\n    regexrange: [[/-/, 'regexp.escape.control'], [/\\^/, 'regexp.invalid'], [/@regexpesc/, 'regexp.escape'], [/[^\\]]/, 'regexp'], [/\\]/, {\n      token: 'regexp.escape.control',\n      next: '@pop',\n      bracket: '@close'\n    }]],\n    string_double: [[/[^\\\\\"\\$]+/, 'string'], [/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@pop'], [/\\$\\w+/, 'identifier']],\n    string_single: [[/[^\\\\'\\$]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/'/, 'string', '@pop'], [/\\$\\w+/, 'identifier']]\n  }\n};"],"sourceRoot":""}