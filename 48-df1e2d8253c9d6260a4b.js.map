{"version":3,"sources":["webpack:///./node_modules/@etclabscore/react-monaco-editor/node_modules/monaco-editor/esm/vs/basic-languages/lua/lua.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","keywords","token","operators","symbols","escapes","tokenizer","root","cases","include","whitespace","comment","next","string"],"mappings":"4FAAA,qFAIO,IAAIA,EAAO,CAChBC,SAAU,CACRC,YAAa,KACbC,aAAc,CAAC,OAAQ,OAEzBC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MACzCC,iBAAkB,CAAC,CACjBC,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,MAETC,iBAAkB,CAAC,CACjBF,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,OAGAE,EAAW,CACpBC,aAAc,GACdC,aAAc,OACdC,SAAU,CAAC,MAAO,QAAS,KAAM,OAAQ,SAAU,MAAO,QAAS,MAAO,WAAY,OAAQ,KAAM,KAAM,QAAS,MAAO,MAAO,KAAM,SAAU,SAAU,OAAQ,OAAQ,QAAS,SACpLR,SAAU,CAAC,CACTS,MAAO,oBACPP,KAAM,IACNC,MAAO,KACN,CACDM,MAAO,kBACPP,KAAM,IACNC,MAAO,KACN,CACDM,MAAO,wBACPP,KAAM,IACNC,MAAO,MAETO,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,OAEhHC,QAAS,wBACTC,QAAS,wEAETC,UAAW,CACTC,KAAM,CAEN,CAAC,eAAgB,CACfC,MAAO,CACL,YAAa,CACXN,MAAO,cAET,WAAY,gBAIhB,CACEO,QAAS,eAGX,CAAC,sCAAuC,CAAC,YAAa,GAAI,MAAO,GAAI,cAAe,CAAC,sCAAuC,CAAC,YAAa,GAAI,MAAO,GAAI,cAEzJ,CAAC,aAAc,aAAc,CAAC,WAAY,CACxCD,MAAO,CACL,aAAc,YACd,WAAY,MAIhB,CAAC,2BAA4B,gBAAiB,CAAC,gCAAiC,cAAe,CAAC,OAAQ,UAExG,CAAC,QAAS,aAEV,CAAC,kBAAmB,kBAAmB,CAAC,kBAAmB,kBAAmB,CAAC,IAAK,SAAU,aAAc,CAAC,IAAK,SAAU,cAC5HE,WAAY,CAAC,CAAC,aAAc,IAAK,CAAC,eAAgB,UAAW,eAAgB,CAAC,QAAS,YACvFC,QAAS,CAAC,CAAC,SAAU,WAAY,CAAC,aAAc,CAC9CH,MAAO,CACL,UAAW,CACTN,MAAO,UACPU,KAAM,QAER,WAAY,aAEZ,CAAC,IAAK,YACVC,OAAQ,CAAC,CAAC,WAAY,UAAW,CAAC,WAAY,iBAAkB,CAAC,MAAO,yBAA0B,CAAC,OAAQ,CACzGL,MAAO,CACL,UAAW,CACTN,MAAO,SACPU,KAAM,QAER,WAAY","file":"48-df1e2d8253c9d6260a4b.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n  comments: {\n    lineComment: '--',\n    blockComment: ['--[[', ']]']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.lua',\n  keywords: ['and', 'break', 'do', 'else', 'elseif', 'end', 'false', 'for', 'function', 'goto', 'if', 'in', 'local', 'nil', 'not', 'or', 'repeat', 'return', 'then', 'true', 'until', 'while'],\n  brackets: [{\n    token: 'delimiter.bracket',\n    open: '{',\n    close: '}'\n  }, {\n    token: 'delimiter.array',\n    open: '[',\n    close: ']'\n  }, {\n    token: 'delimiter.parenthesis',\n    open: '(',\n    close: ')'\n  }],\n  operators: ['+', '-', '*', '/', '%', '^', '#', '==', '~=', '<=', '>=', '<', '>', '=', ';', ':', ',', '.', '..', '...'],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n    // identifiers and keywords\n    [/[a-zA-Z_]\\w*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }],\n    // whitespace\n    {\n      include: '@whitespace'\n    },\n    // keys\n    [/(,)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['delimiter', '', 'key', '', 'delimiter']], [/({)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['@brackets', '', 'key', '', 'delimiter']],\n    // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }],\n    // numbers\n    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'], [/\\d+?/, 'number'],\n    // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'],\n    // strings: recover on non-terminated strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string.\"'], [/'/, 'string', \"@string.'\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/--\\[([=]*)\\[/, 'comment', '@comment.$1'], [/--.*$/, 'comment']],\n    comment: [[/[^\\]]+/, 'comment'], [/\\]([=]*)\\]/, {\n      cases: {\n        '$1==$S2': {\n          token: 'comment',\n          next: '@pop'\n        },\n        '@default': 'comment'\n      }\n    }], [/./, 'comment']],\n    string: [[/[^\\\\\"']+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/[\"']/, {\n      cases: {\n        '$#==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }]]\n  }\n};"],"sourceRoot":""}