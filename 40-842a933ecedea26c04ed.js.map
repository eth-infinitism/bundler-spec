{"version":3,"sources":["webpack:///./node_modules/@etclabscore/react-monaco-editor/node_modules/monaco-editor/esm/vs/basic-languages/hcl/hcl.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","language","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","terraformFunctions","terraformMainBlocks","tokenizer","root","include","terraform","cases","token","heredoc","next","heredocBody","whitespace","comment","string","stringInsideExpression","stringExpression"],"mappings":"4FAAA,qFAIO,IAAIA,EAAO,CAChBC,SAAU,CACRC,YAAa,KACbC,aAAc,CAAC,KAAM,OAEvBC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MACzCC,iBAAkB,CAAC,CACjBC,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,IACPC,MAAO,CAAC,YAEVC,iBAAkB,CAAC,CACjBH,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,OAGAG,EAAW,CACpBC,aAAc,GACdC,aAAc,OACdC,SAAU,CAAC,MAAO,QAAS,OAAQ,WAAY,MAAO,SAAU,SAAU,OAAQ,OAAQ,QAAS,OAAQ,MAAO,QAAS,SAAU,OAAQ,KAAM,UACnJC,UAAW,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,IAAK,IAAK,IAAK,IAAK,MAAO,KACzGC,QAAS,wBACTC,QAAS,wEACTC,mBAAoB,syBACpBC,oBAAqB,mEACrBC,UAAW,CACTC,KAAM,CAEN,CAAC,wFAAyF,CAAC,OAAQ,GAAI,SAAU,GAAI,SAAU,GAAI,cAEnI,CAAC,8EAA+E,CAAC,aAAc,GAAI,SAAU,GAAI,SAAU,GAAI,cAE/H,CAAC,yEAA0E,CAAC,aAAc,GAAI,SAAU,GAAI,WAAY,GAAI,cAE5H,CACEC,QAAS,eAEXC,UAAW,CAEX,CAAC,0BAA2B,CAAC,OAAQ,cAErC,CAAC,iBAAkB,CACjBC,MAAO,CACL,YAAa,CACXC,MAAO,cAET,WAAY,cAEZ,CACFH,QAAS,eACR,CACDA,QAAS,YAGX,CAAC,aAAc,aAAc,CAAC,mBAAoB,aAAc,CAAC,WAAY,CAC3EE,MAAO,CACL,aAAc,WACd,WAAY,MAIhB,CAAC,yBAA0B,gBAAiB,CAAC,2BAA4B,gBAAiB,CAAC,WAAY,UAAW,CAAC,KAAM,UAAW,CAAC,QAAS,aAE9I,CAAC,IAAK,SAAU,WAAY,CAAC,IAAK,YAClCE,QAAS,CAAC,CAAC,6BAA8B,CACvCD,MAAO,2BACPE,KAAM,qBAERC,YAAa,CAAC,CAAC,cAAe,CAC5BJ,MAAO,CACL,UAAW,CAAC,CACVC,MAAO,2BACPE,KAAM,YAER,WAAY,oBAEZ,CAAC,IAAK,mBACVE,WAAY,CAAC,CAAC,aAAc,IAAK,CAAC,OAAQ,UAAW,YAAa,CAAC,UAAW,WAAY,CAAC,OAAQ,YACnGC,QAAS,CAAC,CAAC,UAAW,WAAY,CAAC,OAAQ,UAAW,QAAS,CAAC,QAAS,YACzEC,OAAQ,CAAC,CAAC,OAAQ,CAChBN,MAAO,YACPE,KAAM,sBACJ,CAAC,YAAa,UAAW,CAAC,WAAY,iBAAkB,CAAC,MAAO,yBAA0B,CAAC,IAAK,SAAU,YAC9GK,uBAAwB,CAAC,CAAC,UAAW,UAAW,CAAC,WAAY,iBAAkB,CAAC,MAAO,yBAA0B,CAAC,IAAK,SAAU,SACjIC,iBAAkB,CAAC,CAAC,KAAM,CACxBR,MAAO,YACPE,KAAM,SACJ,CAAC,IAAK,SAAU,2BAA4B,CAC9CL,QAAS","file":"40-842a933ecedea26c04ed.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.hcl',\n  keywords: ['var', 'local', 'path', 'for_each', 'any', 'string', 'number', 'bool', 'true', 'false', 'null', 'if ', 'else ', 'endif ', 'for ', 'in', 'endfor'],\n  operators: ['=', '>=', '<=', '==', '!=', '+', '-', '*', '/', '%', '&&', '||', '!', '<', '>', '?', '...', ':'],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  terraformFunctions: /(abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring)/,\n  terraformMainBlocks: /(module|data|terraform|resource|provider|variable|output|locals)/,\n  tokenizer: {\n    root: [\n    // highlight main blocks\n    [/^@terraformMainBlocks([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/, ['type', '', 'string', '', 'string', '', '@brackets']],\n    // highlight all the remaining blocks\n    [/(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/, ['identifier', '', 'string', '', 'string', '', '@brackets']],\n    // highlight block\n    [/(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)(=)(\\{)/, ['identifier', '', 'string', '', 'operator', '', '@brackets']],\n    // terraform general highlight - shared with expressions\n    {\n      include: '@terraform'\n    }],\n    terraform: [\n    // highlight terraform functions\n    [/@terraformFunctions(\\()/, ['type', '@brackets']],\n    // all other words are variables or keywords\n    [/[a-zA-Z_]\\w*-*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'variable'\n      }\n    }], {\n      include: '@whitespace'\n    }, {\n      include: '@heredoc'\n    },\n    // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'operator',\n        '@default': ''\n      }\n    }],\n    // numbers\n    [/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float'], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/\\d[\\d']*/, 'number'], [/\\d/, 'number'], [/[;,.]/, 'delimiter'],\n    // strings\n    [/\"/, 'string', '@string'], [/'/, 'invalid']],\n    heredoc: [[/<<[-]*\\s*[\"]?([\\w\\-]+)[\"]?/, {\n      token: 'string.heredoc.delimiter',\n      next: '@heredocBody.$1'\n    }]],\n    heredocBody: [[/^([\\w\\-]+)$/, {\n      cases: {\n        '$1==$S2': [{\n          token: 'string.heredoc.delimiter',\n          next: '@popall'\n        }],\n        '@default': 'string.heredoc'\n      }\n    }], [/./, 'string.heredoc']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment'], [/#.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    string: [[/\\$\\{/, {\n      token: 'delimiter',\n      next: '@stringExpression'\n    }], [/[^\\\\\"\\$]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@popall']],\n    stringInsideExpression: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@pop']],\n    stringExpression: [[/\\}/, {\n      token: 'delimiter',\n      next: '@pop'\n    }], [/\"/, 'string', '@stringInsideExpression'], {\n      include: '@terraform'\n    }]\n  }\n};"],"sourceRoot":""}