{"version":3,"sources":["webpack:///./node_modules/@etclabscore/react-monaco-editor/node_modules/monaco-editor/esm/vs/basic-languages/pascaligo/pascaligo.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","ignoreCase","token","keywords","typeKeywords","operators","symbols","tokenizer","root","cases","include","comment","string","bracket","next","whitespace"],"mappings":"4FAAA,qFAIO,IAAIA,EAAO,CAChBC,SAAU,CACRC,YAAa,KACbC,aAAc,CAAC,KAAM,OAEvBC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MACrDC,iBAAkB,CAAC,CACjBC,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,MAETC,iBAAkB,CAAC,CACjBF,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,OAGAE,EAAW,CACpBC,aAAc,GACdC,aAAc,aACdC,YAAY,EACZR,SAAU,CAAC,CACTE,KAAM,IACNC,MAAO,IACPM,MAAO,mBACN,CACDP,KAAM,IACNC,MAAO,IACPM,MAAO,oBACN,CACDP,KAAM,IACNC,MAAO,IACPM,MAAO,yBACN,CACDP,KAAM,IACNC,MAAO,IACPM,MAAO,oBAETC,SAAU,CAAC,QAAS,QAAS,OAAQ,QAAS,OAAQ,MAAO,OAAQ,MAAO,OAAQ,WAAY,KAAM,KAAM,MAAO,KAAM,SAAU,SAAU,OAAQ,OAAQ,OAAQ,MAAO,QAAS,OAAQ,SAAU,OAAQ,eAC/MC,aAAc,CAAC,OAAQ,MAAO,OAAQ,MAAO,MAAO,SAAU,SAAU,OAAQ,UAAW,MAAO,MAAO,OACzGC,UAAW,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,IAAK,KAAM,MAAO,MAAO,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAE/GC,QAAS,wBAETC,UAAW,CACTC,KAAM,CAEN,CAAC,iBAAkB,CACjBC,MAAO,CACL,YAAa,CACXP,MAAO,cAET,WAAY,gBAIhB,CACEQ,QAAS,eAGX,CAAC,aAAc,aAAc,CAAC,mBAAoB,aAAc,CAAC,WAAY,CAC3ED,MAAO,CACL,aAAc,YACd,WAAY,MAIhB,CAAC,2BAA4B,gBAAiB,CAAC,sBAAuB,cAAe,CAAC,MAAO,UAE7F,CAAC,QAAS,aAEV,CAAC,kBAAmB,kBAAmB,CAAC,IAAK,SAAU,WAEvD,CAAC,WAAY,UAAW,CAAC,IAAK,kBAAmB,CAAC,QAAS,WAE3DE,QAAS,CAAC,CAAC,WAAY,WAEvB,CAAC,OAAQ,UAAW,QAAS,CAAC,OAAQ,YACtCC,OAAQ,CAAC,CAAC,UAAW,UAAW,CAAC,MAAO,yBAA0B,CAAC,IAAK,CACtEV,MAAO,eACPW,QAAS,SACTC,KAAM,UAERC,WAAY,CAAC,CAAC,aAAc,SAAU,CAAC,OAAQ,UAAW,YAAa,CAAC,UAAW","file":"55-7e9571559fc5649d351d.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['(*', '*)']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.pascaligo',\n  ignoreCase: true,\n  brackets: [{\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }, {\n    open: '<',\n    close: '>',\n    token: 'delimiter.angle'\n  }],\n  keywords: ['begin', 'block', 'case', 'const', 'else', 'end', 'fail', 'for', 'from', 'function', 'if', 'is', 'nil', 'of', 'remove', 'return', 'skip', 'then', 'type', 'var', 'while', 'with', 'option', 'None', 'transaction'],\n  typeKeywords: ['bool', 'int', 'list', 'map', 'nat', 'record', 'string', 'unit', 'address', 'map', 'mtz', 'xtz'],\n  operators: ['=', '>', '<', '<=', '>=', '<>', ':', ':=', 'and', 'mod', 'or', '+', '-', '*', '/', '@', '&', '^', '%'],\n  // we include these common regular expressions\n  symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n    // identifiers and keywords\n    [/[a-zA-Z_][\\w]*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }],\n    // whitespace\n    {\n      include: '@whitespace'\n    },\n    // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }],\n    // numbers\n    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'], [/\\d+/, 'number'],\n    // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'],\n    // strings\n    [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/'/, 'string', '@string'],\n    // characters\n    [/'[^\\\\']'/, 'string'], [/'/, 'string.invalid'], [/\\#\\d+/, 'string']],\n    /* */\n    comment: [[/[^\\(\\*]+/, 'comment'],\n    //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\n    [/\\*\\)/, 'comment', '@pop'], [/\\(\\*/, 'comment']],\n    string: [[/[^\\\\']+/, 'string'], [/\\\\./, 'string.escape.invalid'], [/'/, {\n      token: 'string.quote',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/\\(\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']]\n  }\n};"],"sourceRoot":""}