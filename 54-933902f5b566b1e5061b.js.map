{"version":3,"sources":["webpack:///./node_modules/@etclabscore/react-monaco-editor/node_modules/monaco-editor/esm/vs/basic-languages/pascal/pascal.js"],"names":["conf","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","ignoreCase","token","keywords","typeKeywords","operators","symbols","tokenizer","root","cases","include","comment","string","bracket","next","whitespace"],"mappings":"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","file":"54-933902f5b566b1e5061b.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n  // the default separators except `@$`\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: '//',\n    blockComment: ['{', '}']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*\\\\{\\\\$REGION(\\\\s\\\\'.*\\\\')?\\\\}\"),\n      end: new RegExp('^\\\\s*\\\\{\\\\$ENDREGION\\\\}')\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.pascal',\n  ignoreCase: true,\n  brackets: [{\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }, {\n    open: '<',\n    close: '>',\n    token: 'delimiter.angle'\n  }],\n  keywords: ['absolute', 'abstract', 'all', 'and_then', 'array', 'as', 'asm', 'attribute', 'begin', 'bindable', 'case', 'class', 'const', 'contains', 'default', 'div', 'else', 'end', 'except', 'exports', 'external', 'far', 'file', 'finalization', 'finally', 'forward', 'generic', 'goto', 'if', 'implements', 'import', 'in', 'index', 'inherited', 'initialization', 'interrupt', 'is', 'label', 'library', 'mod', 'module', 'name', 'near', 'not', 'object', 'of', 'on', 'only', 'operator', 'or_else', 'otherwise', 'override', 'package', 'packed', 'pow', 'private', 'program', 'protected', 'public', 'published', 'interface', 'implementation', 'qualified', 'read', 'record', 'resident', 'requires', 'resourcestring', 'restricted', 'segment', 'set', 'shl', 'shr', 'specialize', 'stored', 'then', 'threadvar', 'to', 'try', 'type', 'unit', 'uses', 'var', 'view', 'virtual', 'dynamic', 'overload', 'reintroduce', 'with', 'write', 'xor', 'true', 'false', 'procedure', 'function', 'constructor', 'destructor', 'property', 'break', 'continue', 'exit', 'abort', 'while', 'do', 'for', 'raise', 'repeat', 'until'],\n  typeKeywords: ['boolean', 'double', 'byte', 'integer', 'shortint', 'char', 'longint', 'float', 'string'],\n  operators: ['=', '>', '<', '<=', '>=', '<>', ':', ':=', 'and', 'or', '+', '-', '*', '/', '@', '&', '^', '%'],\n  // we include these common regular expressions\n  symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n    // identifiers and keywords\n    [/[a-zA-Z_][\\w]*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }],\n    // whitespace\n    {\n      include: '@whitespace'\n    },\n    // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }],\n    // numbers\n    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'], [/\\d+/, 'number'],\n    // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'],\n    // strings\n    [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/'/, 'string', '@string'],\n    // characters\n    [/'[^\\\\']'/, 'string'], [/'/, 'string.invalid'], [/\\#\\d+/, 'string']],\n    comment: [[/[^\\*\\}]+/, 'comment'],\n    //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\n    [/\\}/, 'comment', '@pop'], [/[\\{]/, 'comment']],\n    string: [[/[^\\\\']+/, 'string'], [/\\\\./, 'string.escape.invalid'], [/'/, {\n      token: 'string.quote',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/\\{/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']]\n  }\n};"],"sourceRoot":""}