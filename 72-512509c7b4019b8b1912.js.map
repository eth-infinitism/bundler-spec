{"version":3,"sources":["webpack:///./node_modules/@etclabscore/react-monaco-editor/node_modules/monaco-editor/esm/vs/basic-languages/scala/scala.js"],"names":["conf","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","tokenPostfix","keywords","softKeywords","constants","modifiers","softModifiers","name","type","symbols","digits","hexdigits","escapes","fstring_conv","tokenizer","root","token","bracket","next","cases","include","import","allowMethod","comment","case","vardef","string","switchTo","stringt","fstring","fstringt","sstring","sstringt","interp","rawstring","rawstringt","whitespace"],"mappings":"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","file":"72-512509c7b4019b8b1912.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n  /*\n   * `...` is allowed as an identifier.\n   * $ is allowed in identifiers.\n   * unary_<op> is allowed as an identifier.\n   * <name>_= is allowed as an identifier.\n   */\n  wordPattern: /(unary_[@~!#%^&*()\\-=+\\\\|:<>\\/?]+)|([a-zA-Z_$][\\w$]*?_=)|(`[^`]+`)|([a-zA-Z_$][\\w$]*)/g,\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp('^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))'),\n      end: new RegExp('^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))')\n    }\n  }\n};\nexport var language = {\n  tokenPostfix: '.scala',\n  // We can't easily add everything from Dotty, but we can at least add some of its keywords\n  keywords: ['asInstanceOf', 'catch', 'class', 'classOf', 'def', 'do', 'else', 'extends', 'finally', 'for', 'foreach', 'forSome', 'if', 'import', 'isInstanceOf', 'macro', 'match', 'new', 'object', 'package', 'return', 'throw', 'trait', 'try', 'type', 'until', 'val', 'var', 'while', 'with', 'yield',\n  // Dotty-specific:\n  'given', 'enum', 'then'],\n  // Dotty-specific:\n  softKeywords: ['as', 'export', 'extension', 'end', 'derives', 'on'],\n  constants: ['true', 'false', 'null', 'this', 'super'],\n  modifiers: ['abstract', 'final', 'implicit', 'lazy', 'override', 'private', 'protected', 'sealed'],\n  // Dotty-specific:\n  softModifiers: ['inline', 'opaque', 'open', 'transparent', 'using'],\n  name: /(?:[a-z_$][\\w$]*|`[^`]+`)/,\n  type: /(?:[A-Z][\\w$]*)/,\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/^\\\\%@#]+/,\n  digits: /\\d+(_+\\d+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  // C# style strings\n  escapes: /\\\\(?:[btnfr\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  fstring_conv: /[bBhHsScCdoxXeEfgGaAt]|[Tn](?:[HIklMSLNpzZsQ]|[BbhAaCYyjmde]|[RTrDFC])/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n    // strings\n    [/\\braw\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@rawstringt'\n    }], [/\\braw\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@rawstring'\n    }], [/\\bs\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@sstringt'\n    }], [/\\bs\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@sstring'\n    }], [/\\bf\"\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@fstringt'\n    }], [/\\bf\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@fstring'\n    }], [/\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@stringt'\n    }], [/\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@string'\n    }],\n    // numbers\n    [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float', '@allowMethod'], [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float', '@allowMethod'], [/0[xX](@hexdigits)[Ll]?/, 'number.hex', '@allowMethod'], [/(@digits)[fFdD]/, 'number.float', '@allowMethod'], [/(@digits)[lL]?/, 'number', '@allowMethod'], [/\\b_\\*/, 'key'], [/\\b(_)\\b/, 'keyword', '@allowMethod'],\n    // identifiers and keywords\n    [/\\bimport\\b/, 'keyword', '@import'], [/\\b(case)([ \\t]+)(class)\\b/, ['keyword.modifier', 'white', 'keyword']], [/\\bcase\\b/, 'keyword', '@case'], [/\\bva[lr]\\b/, 'keyword', '@vardef'], [/\\b(def)([ \\t]+)((?:unary_)?@symbols|@name(?:_=)|@name)/, ['keyword', 'white', 'identifier']], [/@name(?=[ \\t]*:(?!:))/, 'variable'], [/(\\.)(@name|@symbols)/, ['operator', {\n      token: '@rematch',\n      next: '@allowMethod'\n    }]], [/([{(])(\\s*)(@name(?=\\s*=>))/, ['@brackets', 'white', 'variable']], [/@name/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@softKeywords': 'keyword',\n        '@modifiers': 'keyword.modifier',\n        '@softModifiers': 'keyword.modifier',\n        '@constants': {\n          token: 'constant',\n          next: '@allowMethod'\n        },\n        '@default': {\n          token: 'identifier',\n          next: '@allowMethod'\n        }\n      }\n    }], [/@type/, 'type', '@allowMethod'],\n    // whitespace\n    {\n      include: '@whitespace'\n    },\n    // @ annotations.\n    [/@[a-zA-Z_$][\\w$]*(?:\\.[a-zA-Z_$][\\w$]*)*/, 'annotation'],\n    // delimiters and operators\n    [/[{(]/, '@brackets'], [/[})]/, '@brackets', '@allowMethod'], [/\\[/, 'operator.square'], [/](?!\\s*(?:va[rl]|def|type)\\b)/, 'operator.square', '@allowMethod'], [/]/, 'operator.square'], [/([=-]>|<-|>:|<:|:>|<%)(?=[\\s\\w()[\\]{},\\.\"'`])/, 'keyword'], [/@symbols/, 'operator'],\n    // delimiter: after number because of .\\d floats\n    [/[;,\\.]/, 'delimiter'],\n    // symbols\n    [/'[a-zA-Z$][\\w$]*(?!')/, 'attribute.name'],\n    // characters\n    [/'[^\\\\']'/, 'string', '@allowMethod'], [/(')(@escapes)(')/, ['string', 'string.escape', {\n      token: 'string',\n      next: '@allowMethod'\n    }]], [/'/, 'string.invalid']],\n    import: [[/;/, 'delimiter', '@pop'], [/^|$/, '', '@pop'], [/[ \\t]+/, 'white'], [/[\\n\\r]+/, 'white', '@pop'], [/\\/\\*/, 'comment', '@comment'], [/@name|@type/, 'type'], [/[(){}]/, '@brackets'], [/[[\\]]/, 'operator.square'], [/[\\.,]/, 'delimiter']],\n    allowMethod: [[/^|$/, '', '@pop'], [/[ \\t]+/, 'white'], [/[\\n\\r]+/, 'white', '@pop'], [/\\/\\*/, 'comment', '@comment'], [/(?==>[\\s\\w([{])/, 'keyword', '@pop'], [/(@name|@symbols)(?=[ \\t]*[[({\"'`]|[ \\t]+(?:[+-]?\\.?\\d|\\w))/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword',\n          next: '@pop'\n        },\n        '->|<-|>:|<:|<%': {\n          token: 'keyword',\n          next: '@pop'\n        },\n        '@default': {\n          token: '@rematch',\n          next: '@pop'\n        }\n      }\n    }], ['', '', '@pop']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\/\\*/, 'comment', '@push'], [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    case: [[/\\b_\\*/, 'key'], [/\\b(_|true|false|null|this|super)\\b/, 'keyword', '@allowMethod'], [/\\bif\\b|=>/, 'keyword', '@pop'], [/`[^`]+`/, 'identifier', '@allowMethod'], [/@name/, 'variable', '@allowMethod'], [/:::?|\\||@(?![a-z_$])/, 'keyword'], {\n      include: '@root'\n    }],\n    vardef: [[/\\b_\\*/, 'key'], [/\\b(_|true|false|null|this|super)\\b/, 'keyword'], [/@name/, 'variable'], [/:::?|\\||@(?![a-z_$])/, 'keyword'], [/=|:(?!:)/, 'operator', '@pop'], [/$/, 'white', '@pop'], {\n      include: '@root'\n    }],\n    string: [[/[^\\\\\"\\n\\r]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }]],\n    stringt: [[/[^\\\\\"\\n\\r]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"(?=\"\"\")/, 'string'], [/\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }], [/\"/, 'string']],\n    fstring: [[/@escapes/, 'string.escape'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }], [/\\$\\$/, 'string'], [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']], [/\\$\\{/, 'operator', '@interp'], [/%%/, 'string'], [/(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'keyword.modifier', 'number', 'metatag']], [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'number', 'metatag']], [/(%)([\\-#+ 0,(])(@fstring_conv)/, ['metatag', 'keyword.modifier', 'metatag']], [/(%)(@fstring_conv)/, ['metatag', 'metatag']], [/./, 'string']],\n    fstringt: [[/@escapes/, 'string.escape'], [/\"(?=\"\"\")/, 'string'], [/\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }], [/\\$\\$/, 'string'], [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']], [/\\$\\{/, 'operator', '@interp'], [/%%/, 'string'], [/(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'keyword.modifier', 'number', 'metatag']], [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'number', 'metatag']], [/(%)([\\-#+ 0,(])(@fstring_conv)/, ['metatag', 'keyword.modifier', 'metatag']], [/(%)(@fstring_conv)/, ['metatag', 'metatag']], [/./, 'string']],\n    sstring: [[/@escapes/, 'string.escape'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }], [/\\$\\$/, 'string'], [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']], [/\\$\\{/, 'operator', '@interp'], [/./, 'string']],\n    sstringt: [[/@escapes/, 'string.escape'], [/\"(?=\"\"\")/, 'string'], [/\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }], [/\\$\\$/, 'string'], [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']], [/\\$\\{/, 'operator', '@interp'], [/./, 'string']],\n    interp: [[/{/, 'operator', '@push'], [/}/, 'operator', '@pop'], {\n      include: '@root'\n    }],\n    rawstring: [[/[^\"]/, 'string'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }]],\n    rawstringt: [[/[^\"]/, 'string'], [/\"(?=\"\"\")/, 'string'], [/\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }], [/\"/, 'string']],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']]\n  }\n};"],"sourceRoot":""}