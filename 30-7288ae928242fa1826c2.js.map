{"version":3,"sources":["webpack:///./node_modules/@etclabscore/react-monaco-editor/node_modules/monaco-editor/esm/vs/basic-languages/coffee/coffee.js"],"names":["conf","wordPattern","comments","blockComment","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","ignoreCase","tokenPostfix","token","regEx","keywords","symbols","escapes","tokenizer","root","cases","this","next","string","herestring","comment","hereregexp"],"mappings":"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","file":"30-7288ae928242fa1826c2.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    blockComment: ['###', '###'],\n    lineComment: '#'\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp('^\\\\s*#region\\\\b'),\n      end: new RegExp('^\\\\s*#endregion\\\\b')\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  ignoreCase: true,\n  tokenPostfix: '.coffee',\n  brackets: [{\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }],\n  regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n  keywords: ['and', 'or', 'is', 'isnt', 'not', 'on', 'yes', '@', 'no', 'off', 'true', 'false', 'null', 'this', 'new', 'delete', 'typeof', 'in', 'instanceof', 'return', 'throw', 'break', 'continue', 'debugger', 'if', 'else', 'switch', 'for', 'while', 'do', 'try', 'catch', 'finally', 'class', 'extends', 'super', 'undefined', 'then', 'unless', 'until', 'loop', 'of', 'by', 'when'],\n  // we include these common regular expressions\n  symbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n    // identifiers and keywords\n    [/\\@[a-zA-Z_]\\w*/, 'variable.predefined'], [/[a-zA-Z_]\\w*/, {\n      cases: {\n        this: 'variable.predefined',\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': ''\n      }\n    }],\n    // whitespace\n    [/[ \\t\\r\\n]+/, ''],\n    // Comments\n    [/###/, 'comment', '@comment'], [/#.*$/, 'comment'],\n    // regular expressions\n    ['///', {\n      token: 'regexp',\n      next: '@hereregexp'\n    }], [/^(\\s*)(@regEx)/, ['', 'regexp']], [/(\\()(\\s*)(@regEx)/, ['@brackets', '', 'regexp']], [/(\\,)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\=)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\:)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\[)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']], [/(\\!)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\&)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\|)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\?)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']], [/(\\{)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']], [/(\\;)(\\s*)(@regEx)/, ['', '', 'regexp']],\n    // delimiters\n    [/}/, {\n      cases: {\n        '$S2==interpolatedstring': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': '@brackets'\n      }\n    }], [/[{}()\\[\\]]/, '@brackets'], [/@symbols/, 'delimiter'],\n    // numbers\n    [/\\d+[eE]([\\-+]?\\d+)?/, 'number.float'], [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F]+/, 'number.hex'], [/0[0-7]+(?!\\d)/, 'number.octal'], [/\\d+/, 'number'],\n    // delimiter: after number because of .\\d floats\n    [/[,.]/, 'delimiter'],\n    // strings:\n    [/\"\"\"/, 'string', '@herestring.\"\"\"'], [/'''/, 'string', \"@herestring.'''\"], [/\"/, {\n      cases: {\n        '@eos': 'string',\n        '@default': {\n          token: 'string',\n          next: '@string.\"'\n        }\n      }\n    }], [/'/, {\n      cases: {\n        '@eos': 'string',\n        '@default': {\n          token: 'string',\n          next: \"@string.'\"\n        }\n      }\n    }]],\n    string: [[/[^\"'\\#\\\\]+/, 'string'], [/@escapes/, 'string.escape'], [/\\./, 'string.escape.invalid'], [/\\./, 'string.escape.invalid'], [/#{/, {\n      cases: {\n        '$S2==\"': {\n          token: 'string',\n          next: 'root.interpolatedstring'\n        },\n        '@default': 'string'\n      }\n    }], [/[\"']/, {\n      cases: {\n        '$#==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }], [/#/, 'string']],\n    herestring: [[/(\"\"\"|''')/, {\n      cases: {\n        '$1==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }], [/[^#\\\\'\"]+/, 'string'], [/['\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\./, 'string.escape.invalid'], [/#{/, {\n      token: 'string.quote',\n      next: 'root.interpolatedstring'\n    }], [/#/, 'string']],\n    comment: [[/[^#]+/, 'comment'], [/###/, 'comment', '@pop'], [/#/, 'comment']],\n    hereregexp: [[/[^\\\\\\/#]+/, 'regexp'], [/\\\\./, 'regexp'], [/#.*$/, 'comment'], ['///[igm]*', {\n      token: 'regexp',\n      next: '@pop'\n    }], [/\\//, 'regexp']]\n  }\n};"],"sourceRoot":""}